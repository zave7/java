※ 순서
1. 변수(variable) (자료형, data type)

2. 연산자(operator)

3. 제어문(조건문[if, switch ~ case], 반복문[for, while, do ~ while])

4. class (일반, 추상, 내부, interface), 상속

	- field (속성)
	- method (기능)
5. package

	- 사용자 정의 package
	- 시스템 package
		- java.lang
		- java.io
		- java.net
		- java.util
		- java.awt (abstract window tool kit)
		- java sql

-----------------------------------------------------------------------------------------------------------------------------------------

※ 접근제어자 (access modifier)

	private		자신의 클래스 안에서만 사용 가능
	default(생략)	private + 같은 package(디렉토리) 안에서는 사용 가능
	protected		default + package 가 달라도 두 클래스가 상속 관계일 경우 사용 가능
	public		조건 제한 없이 사용 가능

※ 자료형 (Data Type)

	- 기본형 DT		DT		Size(byte)		etc
		- 논리형		boolean	1			true, false

		- 문자형		char		2			'1', 'a', '김', 'abc' X
										특수문자 : ' \t '(tab), ' \n '(개행), ' \' '('), ' \" '("), ' \\ '(\) 
		- 숫자형
			- 정수형	byte		1
					short		2
					int		4
					long		8
					
			- 실수형	float		4
					double	8
	
	- 참조형 DT : Object, 배열(array)

※ 명명규칙

	1. 영문, 숫자, 한글가능, 영문으로 시작(숫자시작 X)
	2. 클래스는 대문자로, 메소드나 변수는 소문자로 시작
		합성어의 경우 단어의 첫글자를 대문자로. (Camel case)
	3. 특수문자 사용 X (단, _ $ 는 가능) $는 일반적으로 안쓴다 (이너클래스의 경우 $ 조합되서 클래스 파일이 만들어지기 때문에 구분 어려움)
	4. 예악어 사용 X 

※ 주석문. (compile 시 제외)

	// : 한줄 주석

	/*
	.
	.
	*/ : 여러줄 주석

	/**
	*
	*
	*/ : document 주석

1. 변수 (Variable) : 하나의 값을 저장하는 공간.
	1-1. 기본형 (primitive) Data Type
		1-1-1. 선언
			형식)
				접근제어자 자료형 변수명;
			ex)
				private int age;
				char gender;
				public String carName;
				private boolean flag;

		1-1-2. 사용(값 저장, 값 할당)
			형식)
				변수명 = 값;
			예)
				age = 25;
				gender = '남';
				carName = "쏘나타";
				flag = true;
			
			-----------> 1, 2를 동시에..
			형식)
				접근제어자 자료명 변수명 = 값;
			예)
				private int age = 25;
				char gender = '여';
				public String carName = "자동차";
				boolean flag = false;

	1-2. 참조형 (reference) Date Type

2. 연산자 (Operator)
	2-1. 단항연산자
		a. 1증가(감소) 연산자 : ++, --
			변수++ : 선실행 후증가
			++변수 : 선증가 후실행
				예)	
					int x = 10;
					S.o.p(x);		10
					S.o.p(x++);	10
					S.o.p(--x);		10
					S.o.p(x++);	10
					S.o.p(++x);	12
					S.o.p(x--);		12
					S.o.p(--x);		10
					S.o.p(x++);	10
					S.o.p(x);		11
			하나의 변수가 수식 내에서 두 번 이상 사용될 경우에는 증감연산자를 사용하지 않는다. 예: y = x*2 + x++
			한 변수가 어떤 함수의 인자로 두 번 이상 사용될 경우에는 이 변수에 증감 연산자 ++, --를 사용하지 않는다. 예: func(x*2, x++)

			2-2. 이항연산자
				a. 산술연산자 : *, /, %(나머지), +, -
				b. 비교연산자
					>, >=, <, <=, ==, !=
					instanceof : 객체의 type 비교
				c. 논리연산
					&& (AND)
					|| (OR)

					&&	T	F	||	T	F
					----------------	----------------
					T	T	F	T	T	T
					F	F	F	F	T	F
			2-3. 삼항연산자
				a. 조건(conditions) ? 값1 : 값2  -> 값만 들어갈 수 있다
					조건 true  >>  값1
						false  >>  값2
			2-4. 대입연산자 : =, +=, -=, *=, /=, %=

			test)
				int x = 10;
				x 의 값을 1증가 시키는 방법?
				++x;
				x++;
				x += 1;
				x = x+1;
				x -= -1
				
				