자료형
변수
연산자
제어문(조건, 반복)

** 객체(Object)
class : class는 객체를 생성하기 위한 틀
Obejct(객체)
		   Object(class) : 자동차(Car)

	속성(field)			기능(method)
	--------------------------------------------
	차이름 carName		가속 speedUp
	색상    color		감속 speedDown
	제조사 maker		정지 stop
	속도    speed
	
method : 기능, 행동, 함수
형식)
접근제어자 ReturnType methodName([args]···) {
	실행문;
	실행문;
	실행문;
	return 값;
};

- retrun type : 실행 결과의 data type
		    return 할 값이 없을 경우 void 
- class //클래스의 접근제어자는 public or default
접근제어자 class ClassName {
	속성
----------------------------------
	메소드
}

** Class 의 사용 (참조형 reference Data type)
1. 선언
	형식)
	접근제어자 ClassName 객체명;
	예)
	public String CarName;
	private Car car;
2. 생성 : memory 에 할당
	형식)
	객체명 = new ClassName([args]);
	ClassName 객체명 = new ClassName([args]);

	carName = new String("쏘나타");
	car = new Car();

	>>>>>1, 2 동시에
	접근제어자 ClassName 객체명 = new ClassName();

3. 사용
	형식)
	객체명.변수 //get
	객체명.변수 = 값; //set
	객체명.method();
	예)
	int len = carName.length();
	car.speed = 100;
	System.out.println(car.speed); //100
	gbb.game();

** 생성자(Constructor) // 객체를 메모리에 올린다
※ this() 로 자기자신의 생성자를 호출 할 수 있다
1. 객체 생성시 최초로 호출. 단, new 연산자와 함께 호출.
2. 객체 생성시 객체의 초기화 작업.
3. 사용자 정의 생성자가 없을 경우 default 생성자 생략되어 있다.
	D C :	public ClassName() {}
	사용자 정의 생성자를 하나 이상 만들경우 default 생성자는 사라진다.

4. Class의 이름와 같은 메소드의 일종.
	Retrun type 이 없다.
	형식)
	접근제어자 ClassName([args]) {
		실행문;
	}

5. method overloading(다중정의)
	같은 이름이 메소드를 여러개 정의 하는것
	단, 인자값의 갯수가 다르거나
			타입이 달라야 한다.
	예)
	public void a() {}
	public void a() {}			//X
	public void a(int x) {}		//O
	public void a(int y) {}		//X
	public int a() {}			//X
	public void a(int x, String s) {} //O
	public void a(int x, int y) {}	//O
	public void a(String s, int y) {} //O

6.	this : 자기 클래스 참조 변수
	super : 상위 클래스 참조 변수

	this() : 자기 클래스 생성자 호출
	super() : 상위 클래스 생성자 호출





char속성 의 디폴트 치는'\u0000' , Java 언어 스펙의 「4.12.5 변수의 초기치」의 설명대로 (null 캐릭터) 입니다.

내 시스템에서 줄 System.out.println('\u0000');은 작은 사각형을 인쇄하는데, 이는 인쇄 가능한 문자가 아니라는 것을 의미합니다.

static!!!

초기값은 항상 부정적으로 해라

자신 클래스에서 메소드나 전역 변수를 사용할 경우
내부적으로 this한다

스태틱으로 선언된 변수는 클래스멤버
일반적으로 선언된 변수는 인스턴스멤버 

